(()=>{"use strict";var n={426:(n,t,e)=>{e.d(t,{Z:()=>s});var r=e(537),o=e.n(r),i=e(645),a=e.n(i)()(o());a.push([n.id,'body {\n    margin: 0;\n    border: 0;\n    height: 100vh;\n    width: 100vw;\n}\n\n#main-container {\n    background-color: beige;\n    height: 100%;\n    width: 100%;\n    display: grid;\n    /* grid-template-rows: repeat(5, 1fr); */\n    grid-template-rows: 50px, 50px, 1fr, 50px, 50px;\n    justify-content: center;\n    align-items: center;\n    overflow: auto;\n}\n\nh1 {\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n}\n\ntable {\n}\n\np {\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n}\n\nbutton{\n  display: flex;\n  flex-direction: row;\n  justify-self: center;\n  justify-content: center;\n  align-self: center;\n  align-items: center;\n  height: 40px;\n  width: 200px;\n}\n\ntd {\n    height: 70px;\n    width: 25px;\n}\n\n.White {\n    background-color: white;\n}\n\n.Black {\n    background-color: black;\n}\n\n.dragging {\n    opacity: 0.5;\n  }\n  \n.Path {\n    border: 3px solid rgb(0, 140, 255); \n    border-radius: 20px;\n    box-sizing: border-box;\n    background-clip: padding-box;\n    border-width: -3px;\n    box-shadow: 0px 0px 5px 3px rgb(0, 140, 255);\n    transition: box-shadow 0.3s ease-out;\n}\n\n  .knight,\n  .target {\n    width: 10px;\n    height: 10px;\n    line-height: 10px;\n    text-align: center;\n    color: red;\n  }\n\n  .knight::before {\n    content: "K";\n    font-size: 24px;\n  }\n\n/* .knight::before {\n    content: "♘";\n    font-size: 54px;\n  } */\n  \n  .target::before {\n    content: "T";\n    font-size: 24px;\n  }\n\n/* .target::before {\n    content: "\\1F3AF";\n    font-size: 32px;\n  } */',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,SAAS;IACT,SAAS;IACT,aAAa;IACb,YAAY;AAChB;;AAEA;IACI,uBAAuB;IACvB,YAAY;IACZ,WAAW;IACX,aAAa;IACb,wCAAwC;IACxC,+CAA+C;IAC/C,uBAAuB;IACvB,mBAAmB;IACnB,cAAc;AAClB;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,uBAAuB;EACvB,mBAAmB;AACrB;;AAEA;AACA;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,uBAAuB;EACvB,mBAAmB;AACrB;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,oBAAoB;EACpB,uBAAuB;EACvB,kBAAkB;EAClB,mBAAmB;EACnB,YAAY;EACZ,YAAY;AACd;;AAEA;IACI,YAAY;IACZ,WAAW;AACf;;AAEA;IACI,uBAAuB;AAC3B;;AAEA;IACI,uBAAuB;AAC3B;;AAEA;IACI,YAAY;EACd;;AAEF;IACI,kCAAkC;IAClC,mBAAmB;IACnB,sBAAsB;IACtB,4BAA4B;IAC5B,kBAAkB;IAClB,4CAA4C;IAC5C,oCAAoC;AACxC;;EAEE;;IAEE,WAAW;IACX,YAAY;IACZ,iBAAiB;IACjB,kBAAkB;IAClB,UAAU;EACZ;;EAEA;IACE,YAAY;IACZ,eAAe;EACjB;;AAEF;;;KAGK;;EAEH;IACE,YAAY;IACZ,eAAe;EACjB;;AAEF;;;KAGK",sourcesContent:['body {\n    margin: 0;\n    border: 0;\n    height: 100vh;\n    width: 100vw;\n}\n\n#main-container {\n    background-color: beige;\n    height: 100%;\n    width: 100%;\n    display: grid;\n    /* grid-template-rows: repeat(5, 1fr); */\n    grid-template-rows: 50px, 50px, 1fr, 50px, 50px;\n    justify-content: center;\n    align-items: center;\n    overflow: auto;\n}\n\nh1 {\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n}\n\ntable {\n}\n\np {\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n}\n\nbutton{\n  display: flex;\n  flex-direction: row;\n  justify-self: center;\n  justify-content: center;\n  align-self: center;\n  align-items: center;\n  height: 40px;\n  width: 200px;\n}\n\ntd {\n    height: 70px;\n    width: 25px;\n}\n\n.White {\n    background-color: white;\n}\n\n.Black {\n    background-color: black;\n}\n\n.dragging {\n    opacity: 0.5;\n  }\n  \n.Path {\n    border: 3px solid rgb(0, 140, 255); \n    border-radius: 20px;\n    box-sizing: border-box;\n    background-clip: padding-box;\n    border-width: -3px;\n    box-shadow: 0px 0px 5px 3px rgb(0, 140, 255);\n    transition: box-shadow 0.3s ease-out;\n}\n\n  .knight,\n  .target {\n    width: 10px;\n    height: 10px;\n    line-height: 10px;\n    text-align: center;\n    color: red;\n  }\n\n  .knight::before {\n    content: "K";\n    font-size: 24px;\n  }\n\n/* .knight::before {\n    content: "♘";\n    font-size: 54px;\n  } */\n  \n  .target::before {\n    content: "T";\n    font-size: 24px;\n  }\n\n/* .target::before {\n    content: "\\1F3AF";\n    font-size: 32px;\n  } */'],sourceRoot:""}]);const s=a},645:n=>{n.exports=function(n){var t=[];return t.toString=function(){return this.map((function(t){var e="",r=void 0!==t[5];return t[4]&&(e+="@supports (".concat(t[4],") {")),t[2]&&(e+="@media ".concat(t[2]," {")),r&&(e+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),e+=n(t),r&&(e+="}"),t[2]&&(e+="}"),t[4]&&(e+="}"),e})).join("")},t.i=function(n,e,r,o,i){"string"==typeof n&&(n=[[null,n,void 0]]);var a={};if(r)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(a[c]=!0)}for(var d=0;d<n.length;d++){var l=[].concat(n[d]);r&&a[l[0]]||(void 0!==i&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=i),e&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=e):l[2]=e),o&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=o):l[4]="".concat(o)),t.push(l))}},t}},537:n=>{n.exports=function(n){var t=n[1],e=n[3];if(!e)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(e)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */");return[t].concat([i]).join("\n")}return[t].join("\n")}},379:n=>{var t=[];function e(n){for(var e=-1,r=0;r<t.length;r++)if(t[r].identifier===n){e=r;break}return e}function r(n,r){for(var i={},a=[],s=0;s<n.length;s++){var c=n[s],d=r.base?c[0]+r.base:c[0],l=i[d]||0,A="".concat(d," ").concat(l);i[d]=l+1;var u=e(A),p={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==u)t[u].references++,t[u].updater(p);else{var f=o(p,r);r.byIndex=s,t.splice(s,0,{identifier:A,updater:f,references:1})}a.push(A)}return a}function o(n,t){var e=t.domAPI(t);return e.update(n),function(t){if(t){if(t.css===n.css&&t.media===n.media&&t.sourceMap===n.sourceMap&&t.supports===n.supports&&t.layer===n.layer)return;e.update(n=t)}else e.remove()}}n.exports=function(n,o){var i=r(n=n||[],o=o||{});return function(n){n=n||[];for(var a=0;a<i.length;a++){var s=e(i[a]);t[s].references--}for(var c=r(n,o),d=0;d<i.length;d++){var l=e(i[d]);0===t[l].references&&(t[l].updater(),t.splice(l,1))}i=c}}},569:n=>{var t={};n.exports=function(n,e){var r=function(n){if(void 0===t[n]){var e=document.querySelector(n);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(n){e=null}t[n]=e}return t[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(e)}},216:n=>{n.exports=function(n){var t=document.createElement("style");return n.setAttributes(t,n.attributes),n.insert(t,n.options),t}},565:(n,t,e)=>{n.exports=function(n){var t=e.nc;t&&n.setAttribute("nonce",t)}},795:n=>{n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=n.insertStyleElement(n);return{update:function(e){!function(n,t,e){var r="";e.supports&&(r+="@supports (".concat(e.supports,") {")),e.media&&(r+="@media ".concat(e.media," {"));var o=void 0!==e.layer;o&&(r+="@layer".concat(e.layer.length>0?" ".concat(e.layer):""," {")),r+=e.css,o&&(r+="}"),e.media&&(r+="}"),e.supports&&(r+="}");var i=e.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(r,n,t.options)}(t,n,e)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(t)}}}},589:n=>{n.exports=function(n,t){if(t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}}},t={};function e(r){var o=t[r];if(void 0!==o)return o.exports;var i=t[r]={id:r,exports:{}};return n[r](i,i.exports,e),i.exports}e.n=n=>{var t=n&&n.__esModule?()=>n.default:()=>n;return e.d(t,{a:t}),t},e.d=(n,t)=>{for(var r in t)e.o(t,r)&&!e.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:t[r]})},e.o=(n,t)=>Object.prototype.hasOwnProperty.call(n,t),e.nc=void 0,(()=>{var n=e(379),t=e.n(n),r=e(795),o=e.n(r),i=e(569),a=e.n(i),s=e(565),c=e.n(s),d=e(216),l=e.n(d),A=e(589),u=e.n(A),p=e(426),f={};f.styleTagTransform=u(),f.setAttributes=c(),f.insert=a().bind(null,"head"),f.domAPI=o(),f.insertStyleElement=l(),t()(p.Z,f),p.Z&&p.Z.locals&&p.Z.locals;class g{constructor(n,t,e){this.color=n,this.x=t,this.y=e}getColor(){return this.color}getXCoordinate(){return this.x}getYCoordinate(){return this.y}}function h(n,t,e){for(let[r,o]of[[-1,-2],[-2,-1],[1,-2],[-1,2],[2,-1],[-2,1],[2,1],[1,2]]){const i=n.square.x+r,a=n.square.y+o;if(i<0||i>=e.length||a<0||a>=e[0].length)continue;const s=new m(e[i][a],[]);s&&!t.has(`${i},${a}`)&&(n.children.push(s),t.add(`${i},${a}`))}}class m{constructor(n,t){this.square=n,this.children=t}}function C(n,t,e){if(function(n,t){if(n.square.x===t.x&&n.square.y===t.y)return!0}(n,t))return e.push(n),n;for(let r of n.children)if(C(r,t,e))return e.push(n),n}function b(n,t,e){const r=function(n,t,e){let r=[n];for(;r.length>0;){let n=r.shift();h(n,t,e);for(let t of n.children)r.push(t)}return n}(new m((a=e)[(i=n).x][i.y],[]),new Set,a),o=[];var i,a;return C(r,t,o),new Promise((n=>{var t;n((t=o,new Promise((n=>{let e=0;for(let r=t.length-1;r>=0;r--)e++,setTimeout((()=>{let e=t[r].square.x.toString()+t[r].square.y.toString();document.getElementById(e).classList.add("Path"),0===r&&n()}),1e3*e)}))))})).then((()=>{const n=function(n){let t=[];const e=["A","B","C","D","E","F","G","H"];for(let r=0;r<n.length;r++){let o=e[n[r].square.x],i=n[r].square.y+1;t.push({position:o+i})}return t}(o);let t="";for(let e=n.length-1;e>=0;e--)t+=n[e].position,0===e||(t+=" to ");return t}))}function x(){document.querySelectorAll(".Path").forEach((n=>{n.classList.remove("Path")}))}function v(n){let t=n.x.toString()+n.y.toString(),e=document.getElementById(t);return e.classList.add("knight"),e}function E(n){let t=n.x.toString()+n.y.toString(),e=document.getElementById(t);return e.classList.add("target"),e}let B="",y="",w="",I="";async function k(n,t,e,r){n.removeEventListener("click",k),y.setAttribute("draggable",!1),I.setAttribute("draggable",!1);let o=await function(n,t,e){return new Promise(((r,o)=>{r(b(n,t,e))}))}(B,w,e);r.textContent=o,y.setAttribute("draggable",!0),I.setAttribute("draggable",!0),j(e,t),n.addEventListener("click",(o=>k(n,t,e,r)))}function L(n){x(),n.dataTransfer.setData("text/plain","knight")}function S(n){x(),n.dataTransfer.setData("text/plain","target")}function j(n,t){y.addEventListener("dragstart",(n=>L(n))),I.addEventListener("dragstart",(n=>S(n))),t.addEventListener("dragover",(n=>T(n))),t.addEventListener("drop",(e=>{Y(e,n,t)}))}function T(n){n.preventDefault()}function Y(n,t,e){n.preventDefault();const r=n.target.closest(".White, .Black");if(r){const o=n.dataTransfer.getData("text/plain");"knight"===o&&r.id!==I.id?(y.classList.remove("knight"),y.setAttribute("draggable",!1),B=function(n,t){let e=n.toString();const r=e.substring(0,1),o=e.substring(1,2);return t[r][o]}(r.id,t),y=v(B),y.setAttribute("draggable",!0)):"target"===o&&r.id!==y.id&&(I.classList.remove("target"),I.setAttribute("draggable",!1),w=function(n,t){let e=n.toString();const r=e.substring(0,1),o=e.substring(1,2);return t[r][o]}(r.id,t),I=E(w),I.setAttribute("draggable",!0)),j(t,e)}}!function(){const n=document.body,t=document.createElement("div");t.setAttribute("id","main-container");const e=document.createElement("h1");e.textContent="Knight Travails";const r=document.createElement("h4");r.textContent="Drag and drop the knight where you want him to move. The application will find the shortest path and display it for you.",t.appendChild(e),t.appendChild(r);const o=function(){let n=new Array(8);for(let t=0;t<n.length;t++){n[t]=new Array(8);for(let e=0;e<n[t].length;e++)n[t][e]=new g(t%2==0&&e%2==0?"Black":t%2!=0&&e%2==0||t%2==0&&e%2!=0?"White":"Black",t,e)}return n}(),i=function(n){const t=document.createElement("table");let e=0;for(let r=n.length-1;r>=0;r--){const o=document.createElement("tr");o.classList.add("row");const i=document.createElement("td");i.textContent=n.length-e,i.classList.add("number-cell"),o.appendChild(i);for(let t=0;t<n[r].length;t++){const e=n[t][r],i=document.createElement("td");i.classList.add(e.color);let a=e.x.toString()+e.y.toString();i.setAttribute("id",a),o.appendChild(i)}e++,t.appendChild(o)}const r=document.createElement("tr"),o=document.createElement("td");o.classList.add("empty-cell"),r.appendChild(o);for(let n=0;n<8;n++){const t=document.createElement("td");t.classList.add("letter-cell"),t.textContent=String.fromCharCode(65+n),r.appendChild(t)}return t.appendChild(r),t}(o);t.appendChild(i);const a=document.createElement("button");a.textContent="Find Closest Path";const s=document.createElement("p");t.appendChild(a),t.appendChild(s),n.appendChild(t),function(n,t,e,r){B=function(n){return n[3][3]}(n),y=v(B),w=function(n){return n[0][3]}(n),I=E(w),y.setAttribute("draggable",!0),I.setAttribute("draggable",!0),y.addEventListener("dragstart",(n=>L(n))),I.addEventListener("dragstart",(n=>S(n))),e.addEventListener("click",(o=>k(e,t,n,r))),t.addEventListener("dragover",(n=>T(n))),t.addEventListener("drop",(e=>Y(e,n,t)))}(o,i,a,s)}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,