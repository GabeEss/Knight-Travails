(()=>{"use strict";var n={426:(n,t,e)=>{e.d(t,{Z:()=>c});var r=e(537),o=e.n(r),a=e(645),i=e.n(a)()(o());i.push([n.id,'body {\n    margin: 0;\n    border: 0;\n    height: 100vh;\n    width: 100vw;\n}\n\n#main-container {\n    background-color: beige;\n    \n    height: 100%;\n    width: 100%;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n}\n\ntd {\n    height: 60px;\n    width: 60px;\n}\n\n.White {\n    background-color: white;\n}\n\n.Black {\n    background-color: black;\n}\n\n.Path {\n    border: 3px solid rgb(0, 140, 255); \n    border-radius: 20px;\n    box-sizing: border-box;\n    background-clip: padding-box;\n    border-width: -3px;\n    box-shadow: 0px 0px 5px 3px rgb(0, 140, 255);\n    transition: box-shadow 0.3s ease-out;\n}\n\n.knight::before {\n    content: "K";\n    font-size: 72px;\n  }\n\n.knight::before {\n    content: "♘";\n    font-size: 72px;\n  }\n\n.knight {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    color: gold;\n}\n\n.target::before {\n    content: "T";\n    font-size: 72px;\n  }\n\n.target::before {\n    content: "\\1F3AF";\n    font-size: 48px;\n  }\n\n.target {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    color: gold;\n}',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,SAAS;IACT,SAAS;IACT,aAAa;IACb,YAAY;AAChB;;AAEA;IACI,uBAAuB;;IAEvB,YAAY;IACZ,WAAW;IACX,aAAa;IACb,sBAAsB;IACtB,uBAAuB;IACvB,mBAAmB;AACvB;;AAEA;IACI,YAAY;IACZ,WAAW;AACf;;AAEA;IACI,uBAAuB;AAC3B;;AAEA;IACI,uBAAuB;AAC3B;;AAEA;IACI,kCAAkC;IAClC,mBAAmB;IACnB,sBAAsB;IACtB,4BAA4B;IAC5B,kBAAkB;IAClB,4CAA4C;IAC5C,oCAAoC;AACxC;;AAEA;IACI,YAAY;IACZ,eAAe;EACjB;;AAEF;IACI,YAAY;IACZ,eAAe;EACjB;;AAEF;IACI,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,WAAW;AACf;;AAEA;IACI,YAAY;IACZ,eAAe;EACjB;;AAEF;IACI,iBAAiB;IACjB,eAAe;EACjB;;AAEF;IACI,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,WAAW;AACf",sourcesContent:['body {\n    margin: 0;\n    border: 0;\n    height: 100vh;\n    width: 100vw;\n}\n\n#main-container {\n    background-color: beige;\n    \n    height: 100%;\n    width: 100%;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n}\n\ntd {\n    height: 60px;\n    width: 60px;\n}\n\n.White {\n    background-color: white;\n}\n\n.Black {\n    background-color: black;\n}\n\n.Path {\n    border: 3px solid rgb(0, 140, 255); \n    border-radius: 20px;\n    box-sizing: border-box;\n    background-clip: padding-box;\n    border-width: -3px;\n    box-shadow: 0px 0px 5px 3px rgb(0, 140, 255);\n    transition: box-shadow 0.3s ease-out;\n}\n\n.knight::before {\n    content: "K";\n    font-size: 72px;\n  }\n\n.knight::before {\n    content: "♘";\n    font-size: 72px;\n  }\n\n.knight {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    color: gold;\n}\n\n.target::before {\n    content: "T";\n    font-size: 72px;\n  }\n\n.target::before {\n    content: "\\1F3AF";\n    font-size: 48px;\n  }\n\n.target {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    color: gold;\n}'],sourceRoot:""}]);const c=i},645:n=>{n.exports=function(n){var t=[];return t.toString=function(){return this.map((function(t){var e="",r=void 0!==t[5];return t[4]&&(e+="@supports (".concat(t[4],") {")),t[2]&&(e+="@media ".concat(t[2]," {")),r&&(e+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),e+=n(t),r&&(e+="}"),t[2]&&(e+="}"),t[4]&&(e+="}"),e})).join("")},t.i=function(n,e,r,o,a){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(r)for(var c=0;c<this.length;c++){var s=this[c][0];null!=s&&(i[s]=!0)}for(var d=0;d<n.length;d++){var l=[].concat(n[d]);r&&i[l[0]]||(void 0!==a&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=a),e&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=e):l[2]=e),o&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=o):l[4]="".concat(o)),t.push(l))}},t}},537:n=>{n.exports=function(n){var t=n[1],e=n[3];if(!e)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(e)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */");return[t].concat([a]).join("\n")}return[t].join("\n")}},379:n=>{var t=[];function e(n){for(var e=-1,r=0;r<t.length;r++)if(t[r].identifier===n){e=r;break}return e}function r(n,r){for(var a={},i=[],c=0;c<n.length;c++){var s=n[c],d=r.base?s[0]+r.base:s[0],l=a[d]||0,u="".concat(d," ").concat(l);a[d]=l+1;var A=e(u),p={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==A)t[A].references++,t[A].updater(p);else{var f=o(p,r);r.byIndex=c,t.splice(c,0,{identifier:u,updater:f,references:1})}i.push(u)}return i}function o(n,t){var e=t.domAPI(t);return e.update(n),function(t){if(t){if(t.css===n.css&&t.media===n.media&&t.sourceMap===n.sourceMap&&t.supports===n.supports&&t.layer===n.layer)return;e.update(n=t)}else e.remove()}}n.exports=function(n,o){var a=r(n=n||[],o=o||{});return function(n){n=n||[];for(var i=0;i<a.length;i++){var c=e(a[i]);t[c].references--}for(var s=r(n,o),d=0;d<a.length;d++){var l=e(a[d]);0===t[l].references&&(t[l].updater(),t.splice(l,1))}a=s}}},569:n=>{var t={};n.exports=function(n,e){var r=function(n){if(void 0===t[n]){var e=document.querySelector(n);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(n){e=null}t[n]=e}return t[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(e)}},216:n=>{n.exports=function(n){var t=document.createElement("style");return n.setAttributes(t,n.attributes),n.insert(t,n.options),t}},565:(n,t,e)=>{n.exports=function(n){var t=e.nc;t&&n.setAttribute("nonce",t)}},795:n=>{n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=n.insertStyleElement(n);return{update:function(e){!function(n,t,e){var r="";e.supports&&(r+="@supports (".concat(e.supports,") {")),e.media&&(r+="@media ".concat(e.media," {"));var o=void 0!==e.layer;o&&(r+="@layer".concat(e.layer.length>0?" ".concat(e.layer):""," {")),r+=e.css,o&&(r+="}"),e.media&&(r+="}"),e.supports&&(r+="}");var a=e.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(r,n,t.options)}(t,n,e)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(t)}}}},589:n=>{n.exports=function(n,t){if(t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}}},t={};function e(r){var o=t[r];if(void 0!==o)return o.exports;var a=t[r]={id:r,exports:{}};return n[r](a,a.exports,e),a.exports}e.n=n=>{var t=n&&n.__esModule?()=>n.default:()=>n;return e.d(t,{a:t}),t},e.d=(n,t)=>{for(var r in t)e.o(t,r)&&!e.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:t[r]})},e.o=(n,t)=>Object.prototype.hasOwnProperty.call(n,t),e.nc=void 0,(()=>{var n=e(379),t=e.n(n),r=e(795),o=e.n(r),a=e(569),i=e.n(a),c=e(565),s=e.n(c),d=e(216),l=e.n(d),u=e(589),A=e.n(u),p=e(426),f={};f.styleTagTransform=A(),f.setAttributes=s(),f.insert=i().bind(null,"head"),f.domAPI=o(),f.insertStyleElement=l(),t()(p.Z,f),p.Z&&p.Z.locals&&p.Z.locals;class h{constructor(n,t,e){this.color=n,this.x=t,this.y=e}getColor(){return this.color}getXCoordinate(){return this.x}getYCoordinate(){return this.y}}function g(){const n=document.querySelectorAll(".Path");console.log(n),n.forEach((n=>{n.classList.remove("Path")}))}function m(n,t,e){for(let[r,o]of[[-1,-2],[-2,-1],[1,-2],[-1,2],[2,-1],[-2,1],[2,1],[1,2]]){const a=n.square.x+r,i=n.square.y+o;if(a<0||a>=e.length||i<0||i>=e[0].length)continue;const c=new C(e[a][i],[]);c&&!t.has(`${a},${i}`)&&(n.children.push(c),t.add(`${a},${i}`))}}class C{constructor(n,t){this.square=n,this.children=t}}function b(n,t,e){if(function(n,t){if(n.square.x===t.x&&n.square.y===t.y)return!0}(n,t))return e.push(n),n;for(let r of n.children)if(b(r,t,e))return e.push(n),n}function x(n,t,e){const r=function(n,t,e){let r=[n];for(;r.length>0;){let n=r.shift();m(n,t,e);for(let t of n.children)r.push(t)}return n}(new C((i=e)[(a=n).x][a.y],[]),new Set,i),o=[];var a,i;return b(r,t,o),new Promise((n=>{var t;n((t=o,new Promise((n=>{let e=0;for(let r=t.length-1;r>=0;r--)e++,setTimeout((()=>{let e=t[r].square.x.toString()+t[r].square.y.toString();document.getElementById(e).classList.add("Path"),0===r&&n()}),1e3*e)}))))})).then((()=>{const n=function(n){let t=[];const e=["A","B","C","D","E","F","G","H"];for(let r=0;r<n.length;r++){let o=e[n[r].square.x],a=n[r].square.y+1;t.push({position:o+a})}return t}(o);let t="";for(let e=n.length-1;e>=0;e--)t+=n[e].position,0===e||(t+=" to ");return t}))}const v=document.body,y=document.createElement("div");y.setAttribute("id","main-container");const I=document.createElement("h1");I.textContent="Knight Travails";const B=document.createElement("h4");B.textContent="Drag and drop the knight and where you want him to move. The application will find the shortest path and display it for you.",y.appendChild(I),y.appendChild(B);const E=function(){let n=new Array(8);for(let t=0;t<n.length;t++){n[t]=new Array(8);for(let e=0;e<n[t].length;e++)n[t][e]=new h(t%2==0&&e%2==0?"Black":t%2!=0&&e%2==0||t%2==0&&e%2!=0?"White":"Black",t,e)}return n}(),w=function(n){const t=document.createElement("table");let e=0;for(let r=n.length-1;r>=0;r--){const o=document.createElement("tr");o.classList.add("row");const a=document.createElement("td");a.textContent=n.length-e,a.classList.add("number-cell"),o.appendChild(a);for(let t=0;t<n[r].length;t++){const e=n[t][r],a=document.createElement("td");a.classList.add(e.color);let i=e.x.toString()+e.y.toString();a.setAttribute("id",i),o.appendChild(a)}e++,t.appendChild(o)}const r=document.createElement("tr"),o=document.createElement("td");o.classList.add("empty-cell"),r.appendChild(o);for(let n=0;n<8;n++){const t=document.createElement("td");t.classList.add("letter-cell"),t.textContent=String.fromCharCode(65+n),r.appendChild(t)}return t.appendChild(r),t}(E);y.appendChild(w);const k=document.createElement("button");k.textContent="Find Closest Path";const S=document.createElement("p");y.appendChild(k),y.appendChild(S),v.appendChild(y);const L=function(n){return n[3][3]}(E),j=function(n){let t=n.x.toString()+n.y.toString(),e=document.getElementById(t);return e.classList.add("knight"),e}(L),T=function(n){return n[6][0]}(E),P=function(n){let t=n.x.toString()+n.y.toString(),e=document.getElementById(t);return e.classList.add("target"),e}(T);function Y(n){g(),n.dataTransfer.setData("text/plain","knight")}function F(n){g(),n.dataTransfer.setData("text/plain","target")}j.setAttribute("draggable",!0),P.setAttribute("draggable",!0),j.addEventListener("dragstart",Y),P.addEventListener("dragstart",F),k.addEventListener("click",(async()=>{j.removeEventListener("dragstart",Y),P.removeEventListener("dragstart",F);let n=await function(n,t,e){return new Promise(((r,o)=>{r(x(n,t,e))}))}(L,T,E);S.textContent=n,j.addEventListener("dragstart",Y),P.addEventListener("dragstart",F)}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,