(()=>{"use strict";var t={426:(t,n,e)=>{e.d(n,{Z:()=>s});var r=e(537),o=e.n(r),i=e(645),a=e.n(i)()(o());a.push([t.id,'body {\n    margin: 0;\n    border: 0;\n    height: 100vh;\n    width: 100vw;\n}\n\n#main-container {\n    background-color: beige;\n    \n    height: 100%;\n    width: 100%;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n}\n\ntd {\n    height: 75px;\n    width: 75px;\n}\n\n.White {\n    background-color: white;\n}\n\n.Black {\n    background-color: black;\n}\n\n.dragging {\n    opacity: 0.5;\n  }\n  \n.Path {\n    border: 3px solid rgb(0, 140, 255); \n    border-radius: 20px;\n    box-sizing: border-box;\n    background-clip: padding-box;\n    border-width: -3px;\n    box-shadow: 0px 0px 5px 3px rgb(0, 140, 255);\n    transition: box-shadow 0.3s ease-out;\n}\n\n\n\n  .knight,\n  .target {\n    width: 50px;\n    height: 50px;\n    line-height: 50px;\n    text-align: center;\n    color: gold;\n  }\n\n  .knight::before {\n    content: "K";\n    font-size: 36px;\n  }\n\n.knight::before {\n    content: "♘";\n    font-size: 72px;\n  }\n  \n  .target::before {\n    content: "T";\n    font-size: 36px;\n  }\n\n.target::before {\n    content: "\\1F3AF";\n    font-size: 48px;\n  }',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,SAAS;IACT,SAAS;IACT,aAAa;IACb,YAAY;AAChB;;AAEA;IACI,uBAAuB;;IAEvB,YAAY;IACZ,WAAW;IACX,aAAa;IACb,sBAAsB;IACtB,uBAAuB;IACvB,mBAAmB;AACvB;;AAEA;IACI,YAAY;IACZ,WAAW;AACf;;AAEA;IACI,uBAAuB;AAC3B;;AAEA;IACI,uBAAuB;AAC3B;;AAEA;IACI,YAAY;EACd;;AAEF;IACI,kCAAkC;IAClC,mBAAmB;IACnB,sBAAsB;IACtB,4BAA4B;IAC5B,kBAAkB;IAClB,4CAA4C;IAC5C,oCAAoC;AACxC;;;;EAIE;;IAEE,WAAW;IACX,YAAY;IACZ,iBAAiB;IACjB,kBAAkB;IAClB,WAAW;EACb;;EAEA;IACE,YAAY;IACZ,eAAe;EACjB;;AAEF;IACI,YAAY;IACZ,eAAe;EACjB;;EAEA;IACE,YAAY;IACZ,eAAe;EACjB;;AAEF;IACI,iBAAiB;IACjB,eAAe;EACjB",sourcesContent:['body {\n    margin: 0;\n    border: 0;\n    height: 100vh;\n    width: 100vw;\n}\n\n#main-container {\n    background-color: beige;\n    \n    height: 100%;\n    width: 100%;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n}\n\ntd {\n    height: 75px;\n    width: 75px;\n}\n\n.White {\n    background-color: white;\n}\n\n.Black {\n    background-color: black;\n}\n\n.dragging {\n    opacity: 0.5;\n  }\n  \n.Path {\n    border: 3px solid rgb(0, 140, 255); \n    border-radius: 20px;\n    box-sizing: border-box;\n    background-clip: padding-box;\n    border-width: -3px;\n    box-shadow: 0px 0px 5px 3px rgb(0, 140, 255);\n    transition: box-shadow 0.3s ease-out;\n}\n\n\n\n  .knight,\n  .target {\n    width: 50px;\n    height: 50px;\n    line-height: 50px;\n    text-align: center;\n    color: gold;\n  }\n\n  .knight::before {\n    content: "K";\n    font-size: 36px;\n  }\n\n.knight::before {\n    content: "♘";\n    font-size: 72px;\n  }\n  \n  .target::before {\n    content: "T";\n    font-size: 36px;\n  }\n\n.target::before {\n    content: "\\1F3AF";\n    font-size: 48px;\n  }'],sourceRoot:""}]);const s=a},645:t=>{t.exports=function(t){var n=[];return n.toString=function(){return this.map((function(n){var e="",r=void 0!==n[5];return n[4]&&(e+="@supports (".concat(n[4],") {")),n[2]&&(e+="@media ".concat(n[2]," {")),r&&(e+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),e+=t(n),r&&(e+="}"),n[2]&&(e+="}"),n[4]&&(e+="}"),e})).join("")},n.i=function(t,e,r,o,i){"string"==typeof t&&(t=[[null,t,void 0]]);var a={};if(r)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(a[c]=!0)}for(var d=0;d<t.length;d++){var l=[].concat(t[d]);r&&a[l[0]]||(void 0!==i&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=i),e&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=e):l[2]=e),o&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=o):l[4]="".concat(o)),n.push(l))}},n}},537:t=>{t.exports=function(t){var n=t[1],e=t[3];if(!e)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(e)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */");return[n].concat([i]).join("\n")}return[n].join("\n")}},379:t=>{var n=[];function e(t){for(var e=-1,r=0;r<n.length;r++)if(n[r].identifier===t){e=r;break}return e}function r(t,r){for(var i={},a=[],s=0;s<t.length;s++){var c=t[s],d=r.base?c[0]+r.base:c[0],l=i[d]||0,u="".concat(d," ").concat(l);i[d]=l+1;var A=e(u),p={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==A)n[A].references++,n[A].updater(p);else{var h=o(p,r);r.byIndex=s,n.splice(s,0,{identifier:u,updater:h,references:1})}a.push(u)}return a}function o(t,n){var e=n.domAPI(n);return e.update(t),function(n){if(n){if(n.css===t.css&&n.media===t.media&&n.sourceMap===t.sourceMap&&n.supports===t.supports&&n.layer===t.layer)return;e.update(t=n)}else e.remove()}}t.exports=function(t,o){var i=r(t=t||[],o=o||{});return function(t){t=t||[];for(var a=0;a<i.length;a++){var s=e(i[a]);n[s].references--}for(var c=r(t,o),d=0;d<i.length;d++){var l=e(i[d]);0===n[l].references&&(n[l].updater(),n.splice(l,1))}i=c}}},569:t=>{var n={};t.exports=function(t,e){var r=function(t){if(void 0===n[t]){var e=document.querySelector(t);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(t){e=null}n[t]=e}return n[t]}(t);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(e)}},216:t=>{t.exports=function(t){var n=document.createElement("style");return t.setAttributes(n,t.attributes),t.insert(n,t.options),n}},565:(t,n,e)=>{t.exports=function(t){var n=e.nc;n&&t.setAttribute("nonce",n)}},795:t=>{t.exports=function(t){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var n=t.insertStyleElement(t);return{update:function(e){!function(t,n,e){var r="";e.supports&&(r+="@supports (".concat(e.supports,") {")),e.media&&(r+="@media ".concat(e.media," {"));var o=void 0!==e.layer;o&&(r+="@layer".concat(e.layer.length>0?" ".concat(e.layer):""," {")),r+=e.css,o&&(r+="}"),e.media&&(r+="}"),e.supports&&(r+="}");var i=e.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),n.styleTagTransform(r,t,n.options)}(n,t,e)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(n)}}}},589:t=>{t.exports=function(t,n){if(n.styleSheet)n.styleSheet.cssText=t;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(t))}}}},n={};function e(r){var o=n[r];if(void 0!==o)return o.exports;var i=n[r]={id:r,exports:{}};return t[r](i,i.exports,e),i.exports}e.n=t=>{var n=t&&t.__esModule?()=>t.default:()=>t;return e.d(n,{a:n}),n},e.d=(t,n)=>{for(var r in n)e.o(n,r)&&!e.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:n[r]})},e.o=(t,n)=>Object.prototype.hasOwnProperty.call(t,n),e.nc=void 0,(()=>{var t=e(379),n=e.n(t),r=e(795),o=e.n(r),i=e(569),a=e.n(i),s=e(565),c=e.n(s),d=e(216),l=e.n(d),u=e(589),A=e.n(u),p=e(426),h={};h.styleTagTransform=A(),h.setAttributes=c(),h.insert=a().bind(null,"head"),h.domAPI=o(),h.insertStyleElement=l(),n()(p.Z,h),p.Z&&p.Z.locals&&p.Z.locals;class f{constructor(t,n,e){this.color=t,this.x=n,this.y=e}getColor(){return this.color}getXCoordinate(){return this.x}getYCoordinate(){return this.y}}function g(t){let n=t.x.toString()+t.y.toString(),e=document.getElementById(n);return e.classList.add("knight"),e}function v(t){let n=t.x.toString()+t.y.toString(),e=document.getElementById(n);return e.classList.add("target"),e}function m(){document.querySelectorAll(".Path").forEach((t=>{t.classList.remove("Path")}))}function b(t,n,e){for(let[r,o]of[[-1,-2],[-2,-1],[1,-2],[-1,2],[2,-1],[-2,1],[2,1],[1,2]]){const i=t.square.x+r,a=t.square.y+o;if(i<0||i>=e.length||a<0||a>=e[0].length)continue;const s=new C(e[i][a],[]);s&&!n.has(`${i},${a}`)&&(t.children.push(s),n.add(`${i},${a}`))}}class C{constructor(t,n){this.square=t,this.children=n}}function x(t,n,e){if(function(t,n){if(t.square.x===n.x&&t.square.y===n.y)return!0}(t,n))return e.push(t),t;for(let r of t.children)if(x(r,n,e))return e.push(t),t}function E(t,n,e){const r=function(t,n,e){let r=[t];for(;r.length>0;){let t=r.shift();b(t,n,e);for(let n of t.children)r.push(n)}return t}(new C((a=e)[(i=t).x][i.y],[]),new Set,a),o=[];var i,a;return x(r,n,o),new Promise((t=>{var n;t((n=o,new Promise((t=>{let e=0;for(let r=n.length-1;r>=0;r--)e++,setTimeout((()=>{let e=n[r].square.x.toString()+n[r].square.y.toString();document.getElementById(e).classList.add("Path"),0===r&&t()}),1e3*e)}))))})).then((()=>{const t=function(t){let n=[];const e=["A","B","C","D","E","F","G","H"];for(let r=0;r<t.length;r++){let o=e[t[r].square.x],i=t[r].square.y+1;n.push({position:o+i})}return n}(o);let n="";for(let e=t.length-1;e>=0;e--)n+=t[e].position,0===e||(n+=" to ");return n}))}const y=document.body,I=document.createElement("div");I.setAttribute("id","main-container");const B=document.createElement("h1");B.textContent="Knight Travails";const w=document.createElement("h4");w.textContent="Drag and drop the knight and where you want him to move. The application will find the shortest path and display it for you.",I.appendChild(B),I.appendChild(w);const k=function(){let t=new Array(8);for(let n=0;n<t.length;n++){t[n]=new Array(8);for(let e=0;e<t[n].length;e++)t[n][e]=new f(n%2==0&&e%2==0?"Black":n%2!=0&&e%2==0||n%2==0&&e%2!=0?"White":"Black",n,e)}return t}(),L=function(t){const n=document.createElement("table");let e=0;for(let r=t.length-1;r>=0;r--){const o=document.createElement("tr");o.classList.add("row");const i=document.createElement("td");i.textContent=t.length-e,i.classList.add("number-cell"),o.appendChild(i);for(let n=0;n<t[r].length;n++){const e=t[n][r],i=document.createElement("td");i.classList.add(e.color);let a=e.x.toString()+e.y.toString();i.setAttribute("id",a),o.appendChild(i)}e++,n.appendChild(o)}const r=document.createElement("tr"),o=document.createElement("td");o.classList.add("empty-cell"),r.appendChild(o);for(let t=0;t<8;t++){const n=document.createElement("td");n.classList.add("letter-cell"),n.textContent=String.fromCharCode(65+t),r.appendChild(n)}return n.appendChild(r),n}(k);I.appendChild(L);const S=document.createElement("button");S.textContent="Find Closest Path";const T=document.createElement("p");I.appendChild(S),I.appendChild(T),y.appendChild(I);let Y=function(t){return t[3][3]}(k),j=g(Y),P=function(t){return t[0][3]}(k),W=v(P);function q(t){m(),t.dataTransfer.setData("text/plain","knight")}function F(t){m(),t.dataTransfer.setData("text/plain","target")}function Z(){j.addEventListener("dragstart",q),W.addEventListener("dragstart",F),L.addEventListener("dragover",z),L.addEventListener("dragover",z),L.addEventListener("drop",M),L.addEventListener("drop",M)}function z(t){t.preventDefault()}function M(t){t.preventDefault();const n=t.target.closest(".White, .Black");if(n){const e=t.dataTransfer.getData("text/plain");console.log(n.id),"knight"===e&&n.id!==W.id?(j.classList.remove("knight"),j.setAttribute("draggable",!1),Y=function(t,n){let e=t.toString();const r=e.substring(0,1),o=e.substring(1,2);return n[r][o]}(n.id,k),j=g(Y),j.setAttribute("draggable",!0)):"target"===e&&n.id!==j.id&&(W.classList.remove("target"),W.setAttribute("draggable",!1),P=function(t,n){let e=t.toString();const r=e.substring(0,1),o=e.substring(1,2);return n[r][o]}(n.id,k),W=v(P),W.setAttribute("draggable",!0)),Z()}}j.setAttribute("draggable",!0),W.setAttribute("draggable",!0),j.addEventListener("dragstart",q),W.addEventListener("dragstart",F),S.addEventListener("click",(async function t(){S.removeEventListener("click",t),j.removeEventListener("dragstart",q),W.removeEventListener("dragstart",F),L.removeEventListener("dragover",z),L.removeEventListener("dragover",z),L.removeEventListener("drop",M),L.removeEventListener("drop",M);let n=await function(t,n,e){return new Promise(((r,o)=>{r(E(t,n,e))}))}(Y,P,k);T.textContent=n,Z(),S.addEventListener("click",t)})),L.addEventListener("dragover",z),L.addEventListener("dragover",z),L.addEventListener("drop",M),L.addEventListener("drop",M)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,