(()=>{"use strict";var n={426:(n,t,e)=>{e.d(t,{Z:()=>c});var r=e(537),o=e.n(r),i=e(645),a=e.n(i)()(o());a.push([n.id,"body {\n    margin: 0;\n    border: 0;\n    height: 100vh;\n    width: 100vw;\n}\n\n#main-container {\n    background-color: beige;\n    \n    height: 100%;\n    width: 100%;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n}\n\ntd {\n    height: 60px;\n    width: 60px;\n}\n\n.White {\n    background-color: white;\n}\n\n.Black {\n    background-color: black;\n}\n\n.Path {\n    border: 3px solid rgb(0, 140, 255); \n    border-radius: 20px;\n    box-sizing: border-box;\n    background-clip: padding-box;\n    border-width: -3px;\n    box-shadow: 0px 0px 5px 3px rgb(0, 140, 255);\n    transition: box-shadow 0.3s ease-out;\n}\n\n.knight {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    color: gold;\n}\n\n.target {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    color: gold;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,SAAS;IACT,SAAS;IACT,aAAa;IACb,YAAY;AAChB;;AAEA;IACI,uBAAuB;;IAEvB,YAAY;IACZ,WAAW;IACX,aAAa;IACb,sBAAsB;IACtB,uBAAuB;IACvB,mBAAmB;AACvB;;AAEA;IACI,YAAY;IACZ,WAAW;AACf;;AAEA;IACI,uBAAuB;AAC3B;;AAEA;IACI,uBAAuB;AAC3B;;AAEA;IACI,kCAAkC;IAClC,mBAAmB;IACnB,sBAAsB;IACtB,4BAA4B;IAC5B,kBAAkB;IAClB,4CAA4C;IAC5C,oCAAoC;AACxC;;AAEA;IACI,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,WAAW;AACf;;AAEA;IACI,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,WAAW;AACf",sourcesContent:["body {\n    margin: 0;\n    border: 0;\n    height: 100vh;\n    width: 100vw;\n}\n\n#main-container {\n    background-color: beige;\n    \n    height: 100%;\n    width: 100%;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n}\n\ntd {\n    height: 60px;\n    width: 60px;\n}\n\n.White {\n    background-color: white;\n}\n\n.Black {\n    background-color: black;\n}\n\n.Path {\n    border: 3px solid rgb(0, 140, 255); \n    border-radius: 20px;\n    box-sizing: border-box;\n    background-clip: padding-box;\n    border-width: -3px;\n    box-shadow: 0px 0px 5px 3px rgb(0, 140, 255);\n    transition: box-shadow 0.3s ease-out;\n}\n\n.knight {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    color: gold;\n}\n\n.target {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    color: gold;\n}"],sourceRoot:""}]);const c=a},645:n=>{n.exports=function(n){var t=[];return t.toString=function(){return this.map((function(t){var e="",r=void 0!==t[5];return t[4]&&(e+="@supports (".concat(t[4],") {")),t[2]&&(e+="@media ".concat(t[2]," {")),r&&(e+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),e+=n(t),r&&(e+="}"),t[2]&&(e+="}"),t[4]&&(e+="}"),e})).join("")},t.i=function(n,e,r,o,i){"string"==typeof n&&(n=[[null,n,void 0]]);var a={};if(r)for(var c=0;c<this.length;c++){var s=this[c][0];null!=s&&(a[s]=!0)}for(var l=0;l<n.length;l++){var d=[].concat(n[l]);r&&a[d[0]]||(void 0!==i&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=i),e&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=e):d[2]=e),o&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=o):d[4]="".concat(o)),t.push(d))}},t}},537:n=>{n.exports=function(n){var t=n[1],e=n[3];if(!e)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(e)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */");return[t].concat([i]).join("\n")}return[t].join("\n")}},379:n=>{var t=[];function e(n){for(var e=-1,r=0;r<t.length;r++)if(t[r].identifier===n){e=r;break}return e}function r(n,r){for(var i={},a=[],c=0;c<n.length;c++){var s=n[c],l=r.base?s[0]+r.base:s[0],d=i[l]||0,u="".concat(l," ").concat(d);i[l]=d+1;var p=e(u),A={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==p)t[p].references++,t[p].updater(A);else{var h=o(A,r);r.byIndex=c,t.splice(c,0,{identifier:u,updater:h,references:1})}a.push(u)}return a}function o(n,t){var e=t.domAPI(t);return e.update(n),function(t){if(t){if(t.css===n.css&&t.media===n.media&&t.sourceMap===n.sourceMap&&t.supports===n.supports&&t.layer===n.layer)return;e.update(n=t)}else e.remove()}}n.exports=function(n,o){var i=r(n=n||[],o=o||{});return function(n){n=n||[];for(var a=0;a<i.length;a++){var c=e(i[a]);t[c].references--}for(var s=r(n,o),l=0;l<i.length;l++){var d=e(i[l]);0===t[d].references&&(t[d].updater(),t.splice(d,1))}i=s}}},569:n=>{var t={};n.exports=function(n,e){var r=function(n){if(void 0===t[n]){var e=document.querySelector(n);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(n){e=null}t[n]=e}return t[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(e)}},216:n=>{n.exports=function(n){var t=document.createElement("style");return n.setAttributes(t,n.attributes),n.insert(t,n.options),t}},565:(n,t,e)=>{n.exports=function(n){var t=e.nc;t&&n.setAttribute("nonce",t)}},795:n=>{n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=n.insertStyleElement(n);return{update:function(e){!function(n,t,e){var r="";e.supports&&(r+="@supports (".concat(e.supports,") {")),e.media&&(r+="@media ".concat(e.media," {"));var o=void 0!==e.layer;o&&(r+="@layer".concat(e.layer.length>0?" ".concat(e.layer):""," {")),r+=e.css,o&&(r+="}"),e.media&&(r+="}"),e.supports&&(r+="}");var i=e.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(r,n,t.options)}(t,n,e)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(t)}}}},589:n=>{n.exports=function(n,t){if(t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}}},t={};function e(r){var o=t[r];if(void 0!==o)return o.exports;var i=t[r]={id:r,exports:{}};return n[r](i,i.exports,e),i.exports}e.n=n=>{var t=n&&n.__esModule?()=>n.default:()=>n;return e.d(t,{a:t}),t},e.d=(n,t)=>{for(var r in t)e.o(t,r)&&!e.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:t[r]})},e.o=(n,t)=>Object.prototype.hasOwnProperty.call(n,t),e.nc=void 0,(()=>{var n=e(379),t=e.n(n),r=e(795),o=e.n(r),i=e(569),a=e.n(i),c=e(565),s=e.n(c),l=e(216),d=e.n(l),u=e(589),p=e.n(u),A=e(426),h={};h.styleTagTransform=p(),h.setAttributes=s(),h.insert=a().bind(null,"head"),h.domAPI=o(),h.insertStyleElement=d(),t()(A.Z,h),A.Z&&A.Z.locals&&A.Z.locals;class f{constructor(n,t,e){this.color=n,this.x=t,this.y=e}getColor(){return this.color}getXCoordinate(){return this.x}getYCoordinate(){return this.y}}function m(n,t,e){for(let[r,o]of[[-1,-2],[-2,-1],[1,-2],[-1,2],[2,-1],[-2,1],[2,1],[1,2]]){const i=n.square.x+r,a=n.square.y+o;if(i<0||i>=e.length||a<0||a>=e[0].length)continue;const c=new g(e[i][a],[]);c&&!t.has(`${i},${a}`)&&(n.children.push(c),t.add(`${i},${a}`))}}class g{constructor(n,t){this.square=n,this.children=t}}function C(n,t,e){if(function(n,t){if(n.square.x===t.x&&n.square.y===t.y)return!0}(n,t))return e.push(n),n;for(let r of n.children)if(C(r,t,e))return e.push(n),n}function x(n,t,e){const r=[];var o,i;C(function(n,t,e){let r=[n];for(;r.length>0;){let n=r.shift();m(n,t,e);for(let t of n.children)r.push(t)}return n}(new g((i=e)[(o=n).x][o.y],[]),new Set,i),t,r),function(n){let t=0;for(let e=n.length-1;e>=0;e--)t++,setTimeout((()=>{let t=n[e].square.x.toString()+n[e].square.y.toString();console.log(t),document.getElementById(t).classList.add("Path")}),1e3*t)}(r);const a=function(n){let t=[];const e=["A","B","C","D","E","F","G","H"];for(let r=0;r<n.length;r++){let o=e[n[r].square.x],i=n[r].square.y+1;t.push({position:o+i})}return t}(r);let c="";for(let n=a.length-1;n>=0;n--)c+=a[n].position,0===n||(c+=" to ");return c}const b=document.body,v=document.createElement("div");v.setAttribute("id","main-container");const y=document.createElement("h1");y.textContent="Knight Travails";const B=document.createElement("h4");B.textContent="Drag and drop the knight and where you want him to move. The application will find the shortest path and display it for you.",v.appendChild(y),v.appendChild(B);const I=function(){let n=new Array(8);for(let t=0;t<n.length;t++){n[t]=new Array(8);for(let e=0;e<n[t].length;e++)n[t][e]=new f(t%2==0&&e%2==0?"Black":t%2!=0&&e%2==0||t%2==0&&e%2!=0?"White":"Black",t,e)}return n}(),w=function(n){const t=document.createElement("table");let e=0;for(let r=n.length-1;r>=0;r--){const o=document.createElement("tr");o.classList.add("row");const i=document.createElement("td");i.textContent=n.length-e,i.classList.add("number-cell"),o.appendChild(i);for(let t=0;t<n[r].length;t++){const e=n[t][r],i=document.createElement("td");i.classList.add(e.color);let a=e.x.toString()+e.y.toString();i.setAttribute("id",a),o.appendChild(i)}e++,t.appendChild(o)}const r=document.createElement("tr"),o=document.createElement("td");o.classList.add("empty-cell"),r.appendChild(o);for(let n=0;n<8;n++){const t=document.createElement("td");t.classList.add("letter-cell"),t.textContent=String.fromCharCode(65+n),r.appendChild(t)}return t.appendChild(r),t}(I);v.appendChild(w);const E=document.createElement("button");E.textContent="Find Closest Path";const k=document.createElement("p");v.appendChild(E),v.appendChild(k),b.appendChild(v);const S=function(n){return n[3][3]}(I),T=(function(n){let t=n.x.toString()+n.y.toString(),e=document.getElementById(t);e.classList.add("knight"),e.innerText="Knight"}(S),function(n){return n[6][0]}(I));!function(n){let t=n.x.toString()+n.y.toString(),e=document.getElementById(t);e.classList.add("target"),e.innerText="Target"}(T),E.addEventListener("click",(()=>{let n=x(S,T,I);k.textContent=n}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,