(()=>{"use strict";var n={426:(n,t,e)=>{e.d(t,{Z:()=>i});var r=e(537),o=e.n(r),a=e(645),c=e.n(a)()(o());c.push([n.id,"body {\n    margin: 0;\n    border: 0;\n}\n\n#main-container {\n    background-color: beige;\n    height: 100vh;\n    width: 100vw;\n}\n\ntd {\n    height: 75px;\n    width: 75px;\n}\n\n.White {\n    background-color: white;\n}\n\n.Black {\n    background-color: black;\n}\n\n.knight {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    color: gold;\n}\n\n.target {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    color: gold;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,SAAS;IACT,SAAS;AACb;;AAEA;IACI,uBAAuB;IACvB,aAAa;IACb,YAAY;AAChB;;AAEA;IACI,YAAY;IACZ,WAAW;AACf;;AAEA;IACI,uBAAuB;AAC3B;;AAEA;IACI,uBAAuB;AAC3B;;AAEA;IACI,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,WAAW;AACf;;AAEA;IACI,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,WAAW;AACf",sourcesContent:["body {\n    margin: 0;\n    border: 0;\n}\n\n#main-container {\n    background-color: beige;\n    height: 100vh;\n    width: 100vw;\n}\n\ntd {\n    height: 75px;\n    width: 75px;\n}\n\n.White {\n    background-color: white;\n}\n\n.Black {\n    background-color: black;\n}\n\n.knight {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    color: gold;\n}\n\n.target {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    color: gold;\n}"],sourceRoot:""}]);const i=c},645:n=>{n.exports=function(n){var t=[];return t.toString=function(){return this.map((function(t){var e="",r=void 0!==t[5];return t[4]&&(e+="@supports (".concat(t[4],") {")),t[2]&&(e+="@media ".concat(t[2]," {")),r&&(e+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),e+=n(t),r&&(e+="}"),t[2]&&(e+="}"),t[4]&&(e+="}"),e})).join("")},t.i=function(n,e,r,o,a){"string"==typeof n&&(n=[[null,n,void 0]]);var c={};if(r)for(var i=0;i<this.length;i++){var s=this[i][0];null!=s&&(c[s]=!0)}for(var l=0;l<n.length;l++){var u=[].concat(n[l]);r&&c[u[0]]||(void 0!==a&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=a),e&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=e):u[2]=e),o&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=o):u[4]="".concat(o)),t.push(u))}},t}},537:n=>{n.exports=function(n){var t=n[1],e=n[3];if(!e)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(e)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */");return[t].concat([a]).join("\n")}return[t].join("\n")}},379:n=>{var t=[];function e(n){for(var e=-1,r=0;r<t.length;r++)if(t[r].identifier===n){e=r;break}return e}function r(n,r){for(var a={},c=[],i=0;i<n.length;i++){var s=n[i],l=r.base?s[0]+r.base:s[0],u=a[l]||0,d="".concat(l," ").concat(u);a[l]=u+1;var f=e(d),p={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==f)t[f].references++,t[f].updater(p);else{var A=o(p,r);r.byIndex=i,t.splice(i,0,{identifier:d,updater:A,references:1})}c.push(d)}return c}function o(n,t){var e=t.domAPI(t);return e.update(n),function(t){if(t){if(t.css===n.css&&t.media===n.media&&t.sourceMap===n.sourceMap&&t.supports===n.supports&&t.layer===n.layer)return;e.update(n=t)}else e.remove()}}n.exports=function(n,o){var a=r(n=n||[],o=o||{});return function(n){n=n||[];for(var c=0;c<a.length;c++){var i=e(a[c]);t[i].references--}for(var s=r(n,o),l=0;l<a.length;l++){var u=e(a[l]);0===t[u].references&&(t[u].updater(),t.splice(u,1))}a=s}}},569:n=>{var t={};n.exports=function(n,e){var r=function(n){if(void 0===t[n]){var e=document.querySelector(n);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(n){e=null}t[n]=e}return t[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(e)}},216:n=>{n.exports=function(n){var t=document.createElement("style");return n.setAttributes(t,n.attributes),n.insert(t,n.options),t}},565:(n,t,e)=>{n.exports=function(n){var t=e.nc;t&&n.setAttribute("nonce",t)}},795:n=>{n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=n.insertStyleElement(n);return{update:function(e){!function(n,t,e){var r="";e.supports&&(r+="@supports (".concat(e.supports,") {")),e.media&&(r+="@media ".concat(e.media," {"));var o=void 0!==e.layer;o&&(r+="@layer".concat(e.layer.length>0?" ".concat(e.layer):""," {")),r+=e.css,o&&(r+="}"),e.media&&(r+="}"),e.supports&&(r+="}");var a=e.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(r,n,t.options)}(t,n,e)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(t)}}}},589:n=>{n.exports=function(n,t){if(t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}}},t={};function e(r){var o=t[r];if(void 0!==o)return o.exports;var a=t[r]={id:r,exports:{}};return n[r](a,a.exports,e),a.exports}e.n=n=>{var t=n&&n.__esModule?()=>n.default:()=>n;return e.d(t,{a:t}),t},e.d=(n,t)=>{for(var r in t)e.o(t,r)&&!e.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:t[r]})},e.o=(n,t)=>Object.prototype.hasOwnProperty.call(n,t),e.nc=void 0,(()=>{var n=e(379),t=e.n(n),r=e(795),o=e.n(r),a=e(569),c=e.n(a),i=e(565),s=e.n(i),l=e(216),u=e.n(l),d=e(589),f=e.n(d),p=e(426),A={};A.styleTagTransform=f(),A.setAttributes=s(),A.insert=c().bind(null,"head"),A.domAPI=o(),A.insertStyleElement=u(),t()(p.Z,A),p.Z&&p.Z.locals&&p.Z.locals;class h{constructor(n,t,e){this.color=n,this.x=t,this.y=e}getColor(){return this.color}getXCoordinate(){return this.x}getYCoordinate(){return this.y}}function g(n,t,e){for(let[r,o]of[[-1,-2],[-2,-1],[1,-2],[-1,2],[2,-1],[-2,1],[2,1],[1,2]]){const a=n.square.x+r,c=n.square.y+o;if(a<0||a>=e.length||c<0||c>=e[0].length)continue;const i=new m(e[a][c],[]);i&&!t.has(`${a},${c}`)&&(n.children.push(i),t.add(`${a},${c}`))}}class m{constructor(n,t){this.square=n,this.children=t}}const v=document.body,y=document.createElement("div");y.setAttribute("id","main-container");const C=function(){let n=new Array(8);for(let t=0;t<n.length;t++){n[t]=new Array(8);for(let e=0;e<n[t].length;e++)n[t][e]=new h(t%2==0&&e%2==0?"Black":t%2!=0&&e%2==0||t%2==0&&e%2!=0?"White":"Black",t,e)}return n}();y.appendChild(function(n){const t=document.createElement("table");let e=0;for(let r=n.length-1;r>=0;r--){const o=document.createElement("tr");o.classList.add("row");const a=document.createElement("td");a.textContent=n.length-e,a.classList.add("number-cell"),o.appendChild(a);for(let t=0;t<n[r].length;t++){const e=n[t][r],a=document.createElement("td");a.classList.add(e.color);let c=e.x.toString()+e.y.toString();a.setAttribute("id",c),o.appendChild(a)}e++,t.appendChild(o)}const r=document.createElement("tr"),o=document.createElement("td");o.classList.add("empty-cell"),r.appendChild(o);for(let n=0;n<8;n++){const t=document.createElement("td");t.classList.add("letter-cell"),t.textContent=String.fromCharCode(97+n),r.appendChild(t)}return t.appendChild(r),t}(C)),v.appendChild(y);const b=function(n){return n[3][3]}(C),x=(function(n){console.log(n);let t=n.x.toString()+n.y.toString();console.log(t);let e=document.getElementById(t);e.classList.add("knight"),e.innerText="Knight"}(b),function(n){return n[6][0]}(C));var I,B;!function(n){console.log(n);let t=n.x.toString()+n.y.toString();console.log(t);let e=document.getElementById(t);e.classList.add("target"),e.innerText="Target"}(x);const w=[];!function n(t,e,r){if(function(n,t){if(n.square.x===t.x&&n.square.y===t.y)return!0}(t,e))return r.push(t),t;for(let o of t.children)if(n(o,e,r))return r.push(t),t}(function(n,t,e){let r=[n];for(;r.length>0;){let n=r.shift();g(n,t,e);for(let t of n.children)r.push(t)}return n}(new m((B=C)[(I=b).x][I.y],[]),new Set,B),x,w),console.log(w)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,