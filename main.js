(()=>{"use strict";var e={426:(e,t,n)=>{n.d(t,{Z:()=>i});var r=n(537),o=n.n(r),a=n(645),c=n.n(a)()(o());c.push([e.id,"body {\n    margin: 0;\n    border: 0;\n}\n\n#main-container {\n    background-color: beige;\n    height: 100vh;\n    width: 100vw;\n}\n\ntd {\n    height: 75px;\n    width: 75px;\n}\n\n.White {\n    background-color: white;\n}\n\n.Black {\n    background-color: black;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,SAAS;IACT,SAAS;AACb;;AAEA;IACI,uBAAuB;IACvB,aAAa;IACb,YAAY;AAChB;;AAEA;IACI,YAAY;IACZ,WAAW;AACf;;AAEA;IACI,uBAAuB;AAC3B;;AAEA;IACI,uBAAuB;AAC3B",sourcesContent:["body {\n    margin: 0;\n    border: 0;\n}\n\n#main-container {\n    background-color: beige;\n    height: 100vh;\n    width: 100vw;\n}\n\ntd {\n    height: 75px;\n    width: 75px;\n}\n\n.White {\n    background-color: white;\n}\n\n.Black {\n    background-color: black;\n}"],sourceRoot:""}]);const i=c},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,o,a){"string"==typeof e&&(e=[[null,e,void 0]]);var c={};if(r)for(var i=0;i<this.length;i++){var s=this[i][0];null!=s&&(c[s]=!0)}for(var u=0;u<e.length;u++){var l=[].concat(e[u]);r&&c[l[0]]||(void 0!==a&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=a),n&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=n):l[2]=n),o&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=o):l[4]="".concat(o)),t.push(l))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */");return[t].concat([a]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var a={},c=[],i=0;i<e.length;i++){var s=e[i],u=r.base?s[0]+r.base:s[0],l=a[u]||0,d="".concat(u," ").concat(l);a[u]=l+1;var p=n(d),f={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==p)t[p].references++,t[p].updater(f);else{var h=o(f,r);r.byIndex=i,t.splice(i,0,{identifier:d,updater:h,references:1})}c.push(d)}return c}function o(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,o){var a=r(e=e||[],o=o||{});return function(e){e=e||[];for(var c=0;c<a.length;c++){var i=n(a[c]);t[i].references--}for(var s=r(e,o),u=0;u<a.length;u++){var l=n(a[u]);0===t[l].references&&(t[l].updater(),t.splice(l,1))}a=s}}},569:e=>{var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var a=n.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var a=t[r]={id:r,exports:{}};return e[r](a,a.exports,n),a.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.nc=void 0,(()=>{var e=n(379),t=n.n(e),r=n(795),o=n.n(r),a=n(569),c=n.n(a),i=n(565),s=n.n(i),u=n(216),l=n.n(u),d=n(589),p=n.n(d),f=n(426),h={};h.styleTagTransform=p(),h.setAttributes=s(),h.insert=c().bind(null,"head"),h.domAPI=o(),h.insertStyleElement=l(),t()(f.Z,h),f.Z&&f.Z.locals&&f.Z.locals;class m{constructor(e,t,n){this.color=e,this.x=t,this.y=n}getColor(){return this.color}getXCoordinate(){return this.x}getYCoordinate(){return this.y}}function A(e,t,n){for(let[r,o]of[[-1,-2],[-2,-1],[1,-2],[-1,2],[2,-1],[-2,1],[2,1],[1,2]]){const a=e.square.x+r,c=e.square.y+o;if(a<0||a>=n.length||c<0||c>=n[0].length)continue;const i=new v(n[a][c],[]);i&&!t.has(`${a},${c}`)&&(e.children.push(i),t.add(`${a},${c}`))}}class v{constructor(e,t){this.square=e,this.children=t}}const g=document.body,y=document.createElement("div");y.setAttribute("id","main-container");const b=function(){let e=new Array(8);for(let t=0;t<e.length;t++){e[t]=new Array(8);for(let n=0;n<e[t].length;n++)e[t][n]=new m(t%2==0&&n%2==0?"Black":t%2!=0&&n%2==0||t%2==0&&n%2!=0?"White":"Black",t,n)}return e}();y.appendChild(function(e){const t=document.createElement("table");for(let n=0;n<e.length;n++){const r=document.createElement("tr"),o=document.createElement("td");o.textContent=e.length-n,o.classList.add("number-cell"),r.appendChild(o);for(let t=0;t<e[n].length;t++){const o=e[n][t],a=document.createElement("td");a.classList.add(o.color),a.setAttribute("id","square.x"),a.setAttribute("id","square.y"),r.appendChild(a)}t.appendChild(r)}const n=document.createElement("tr"),r=document.createElement("td");r.classList.add("empty-cell"),n.appendChild(r);for(let e=0;e<8;e++){const t=document.createElement("td");t.classList.add("letter-cell"),t.textContent=String.fromCharCode(97+e),n.appendChild(t)}return t.appendChild(n),t}(b)),g.appendChild(y);const C=function(e){return e[0][0]}(b),x=function(e){return e[6][0]}(b);var w,I;const E=[];!function e(t,n,r){if(function(e,t){if(e.square.x===t.x&&e.square.y===t.y)return!0}(t,n))return r.push(t),t;for(let o of t.children)if(e(o,n,r))return r.push(t),t}(function(e,t,n){let r=[e];for(;r.length>0;){let e=r.shift();A(e,t,n);for(let t of e.children)r.push(t)}return e}(new v((I=b)[(w=C).x][w.y],[]),new Set,I),x,E),console.log(E)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,